@page "/data-sources"
@using Microsoft.AspNetCore.Authorization
@using DiplomaThesis.Shared.Contracts
@using DiplomaThesis.Client.Services.Interfaces
@attribute [Authorize(Roles = "Admin, Architect")]

@inject IDatasetService _datasetService
@inject IFileParsingService _parser

<PageTitle>Datasets</PageTitle>

<h1>Datasets</h1>

<div class="flex-column">
    @if (DatasetArray is null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        foreach (var dataset in DatasetArray)
        {
            <div>
                <strong>Id:</strong>&nbsp;@dataset.Id<br/>
                <strong>Name:</strong>&nbsp;@dataset.Name<br/>
                @if (dataset.ColumnNames.Any())
                {
                    <strong>Dataset structure:</strong><br/>
                    <table class="table">
                        <thead>
                        <tr>
                            <th>Names</th>
                            <th>Types</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var column in dataset.ColumnNames.Zip(dataset.ColumnTypes))
                        {
                            <tr>
                                <td>@column.First</td>
                                <td>@column.Second</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
                else
                {
                    <strong>Dataset not uploaded through this app.</strong><br/>
                }
                <strong>Upload more rows:</strong><br/> 
                <InputFile OnChange="@(args => LoadFile(args, dataset.Id))"/>
            </div>
            <hr/>
        }
        <div>
            <strong>Create new dataset from JSON or CSV</strong><br/>
            <InputFile OnChange="@(args => LoadFile(args, Guid.Empty))"/>
        </div>
        <hr/>
    }
</div>

@code {
    DatasetContract[]? DatasetArray { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        var datasets = await _datasetService.GetDatasets();
        DatasetArray = datasets;

        StateHasChanged();
    }
    
    private async Task LoadFile(InputFileChangeEventArgs e, Guid datasetId)
    {
        var file = e.File;
        var datasetFileContent = await new StreamReader(file.OpenReadStream()).ReadToEndAsync();
        string datasetJson;

        try
        {
            datasetJson = _parser.ParseToJson(datasetFileContent, e.File.Name.Split(".").Last());
            Console.WriteLine(datasetJson);
        }
        catch
        {
            Console.WriteLine("Exception");
            return;
        }
        

        if (datasetId.Equals(Guid.Empty))
        {
            if (await _datasetService.UploadNewDataset(e.File.Name.Split(".")[0], datasetJson)) _ = UpdateData();
        }
        else
        {
            if (await _datasetService.UploadRowsToDataset(datasetId, datasetJson)) _ = UpdateData();
        }
    }
}