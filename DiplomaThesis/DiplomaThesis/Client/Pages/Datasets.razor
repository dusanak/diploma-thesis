@page "/data-sources"
@using Microsoft.AspNetCore.Authorization
@using DiplomaThesis.Shared.Contracts
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text
@attribute [Authorize(Roles = "Admin, Architect")]

@inject HttpClient _http

<PageTitle>Datasets</PageTitle>

<h1>Datasets</h1>

<div class="flex-column">
    @if (DatasetArray is null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        foreach (var dataset in DatasetArray)
        {
            <div>
                <strong>Id:</strong>&nbsp;@dataset.Id<br/>
                <strong>Name:</strong>&nbsp;@dataset.Name<br/>
                @if (dataset.ColumnNames.Any())
                {
                    <strong>Dataset structure:</strong><br/>
                    <table class="table">
                        <thead>
                        <tr>
                            <th>Names</th>
                            <th>Types</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var column in dataset.ColumnNames.Zip(dataset.ColumnTypes))
                        {
                            <tr>
                                <td>@column.First</td>
                                <td>@column.Second</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
                else
                {
                    <strong>Dataset not uploaded through this app.</strong><br/>
                }
                <strong>Upload more rows:</strong><br/> 
                <InputFile OnChange="@(args => LoadFile(args, dataset.Id))"/>
            </div>
            <hr/>
        }
        <div>
            <strong>Create new dataset from JSON</strong><br/>
            <InputFile OnChange="@(args => LoadFile(args, Guid.Empty))"/>
        </div>
        <hr/>
    }
</div>

@code {
    DatasetContract[]? DatasetArray { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        var datasets = await GetDatasetsFromBackend();
        DatasetArray = datasets;

        StateHasChanged();
    }

    private async Task<DatasetContract[]?> GetDatasetsFromBackend()
    {
        try
        {
            var response = await _http.GetFromJsonAsync<IEnumerable<DatasetContract>>($"Dataset/ListDatasets");
            return response?.ToArray();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
            return null;
        }
    }

    private async Task LoadFile(InputFileChangeEventArgs e, Guid datasetId)
    {
        var file = e.File;
        var datasetJson = await new StreamReader(file.OpenReadStream()).ReadToEndAsync();

        if (datasetId.Equals(Guid.Empty))
        {
            await UploadNewDataset(e.File.Name.Split(".")[0], datasetJson);
        }
        else
        {
            await UploadRowsToDataset(datasetId, datasetJson);
        }
    }

    private async Task UploadNewDataset(string datasetName, string datasetJson)
    {
        try
        {
            var content = new StringContent(datasetJson, Encoding.UTF8, "application/json");
            var response = await _http.PostAsync($"Dataset/UploadNewDataset/{datasetName}", content);
            if (response.IsSuccessStatusCode)
            {
                _ = UpdateData();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task UploadRowsToDataset(Guid datasetId, string datasetJson)
    {
        try
        {
            var content = new StringContent(datasetJson, Encoding.UTF8, "application/json");
            var response = await _http.PostAsync($"Dataset/UploadRowsToDataset/{datasetId}", content);
            if (response.IsSuccessStatusCode)
            {
                _ = UpdateData();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}