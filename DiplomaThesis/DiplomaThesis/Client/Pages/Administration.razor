@page "/administration"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using DiplomaThesis.Client.Pages.Components
@using DiplomaThesis.Shared.Contracts
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient _http

<PageTitle>Administration</PageTitle>

<h1>Administration</h1>

@if (_users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex">
        <table class="table">
            <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Roles</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var user in _users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Name</td>
                    <td>
                        <div class="flex-row">
                            @foreach (var role in user.Roles)
                            {
                                <text>@role.Name&nbsp;</text>
                            }
                        </div>
                    </td>
                    <td>
                        <button
                            class="btn btn-outline-dark"
                            @onclick="() => _userMenu.ShowUser(user)">
                            Select
                        </button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
        
        <UserMenu @ref="_userMenu" OnUserChanged="UpdateUsers"/>
    </div>
}

@code {
    private UserMenu _userMenu = null!;
    
    private UserContract[]? _users;
    
    protected override async Task OnInitializedAsync()
    {
        await UpdateUsers();
    }

    private async Task UpdateUsers()
    {
        var result = await GetUsersFromBackend();

        if (result is not null)
        {
            if (result.Length > 0)
            {
                _users = result;
            }
        }
    }

    private async Task<UserContract[]?> GetUsersFromBackend()
    {
        try
        {
            var response = await _http.GetFromJsonAsync<IEnumerable<UserContract>>($"Administration/ListUsers");
            return response?.ToArray();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
            return null;
        }
    }
}