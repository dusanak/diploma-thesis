@page "/administration"
@using DiplomaThesis.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using DiplomaThesis.Shared.Commands
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http

<h1>Administration</h1>

@if (_users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Roles</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in _users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Name</td>
                    <td>
                        <table class="table">
                            @foreach (var role in user.Roles)
                            {
                                <tr>
                                    <td>
                                        @role.Name
                                    </td>
                                    <td>
                                        <button
                                            class="btn btn-outline-dark oi oi-trash"
                                            @onclick="() => RemoveRole(user.Name, role.Name)">
                                        </button>
                                    </td>
                                </tr>
                            }
                        </table>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private User[]? _users;
    
    protected override async Task OnInitializedAsync()
    {
        await UpdateUsers();
    }

    private async Task UpdateUsers()
    {
        var result = await GetUsersFromBackend();

        if (result is not null)
        {
            if (result.Length > 0)
            {
                _users = result;
            }
        }
    }

    private async Task<User[]?> GetUsersFromBackend()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<IEnumerable<User>>($"Administration");
            return response?.ToArray();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
            return null;
        }
    }

    private async Task RemoveRole(String userName, String roleName)
    {
        try
        {
            await Http.PutAsJsonAsync(
                $"Administration/RemoveRole", 
                new RemoveRoleCommand { UserName = userName, RoleName = roleName }
                );
            await UpdateUsers();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}