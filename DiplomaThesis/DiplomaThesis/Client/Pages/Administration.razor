@page "/administration"
@using Microsoft.AspNetCore.Authorization
@using DiplomaThesis.Shared.Contracts
@using DiplomaThesis.Client.Services.Interfaces
@attribute [Authorize(Roles = "Admin")]

@inject IAdministrationService _administrationService

<PageTitle>Administration</PageTitle>

<h1>Administration</h1>

@if (_users is null || _userGroups is null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="d-flex">
        <button class="btn @(_showUsers ? "btn-primary" : "btn-outline-primary")" @onclick="() => _showUsers = true">Users</button>
        <button class="btn @(!_showUsers ? "btn-primary" : "btn-outline-primary")" @onclick="() => _showUsers = false">User groups</button>
    </div>
    <div class="d-flex">
        @if (_showUsers)
        {
            <div class="flex-column">
                <table class="table">
                    <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Group</th>
                        <th>Roles</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var user in _users)
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>@user.Name</td>
                            <td>
                                <div class="flex-column">
                                    @foreach (var role in user.Roles)
                                    {
                                        <text>@role.Name&nbsp;</text>
                                    }
                                </div>
                            </td>
                            <td>
                                <button
                                    class="btn btn-outline-dark"
                                    @onclick="() => _userMenu.ShowUser(user)">
                                    Select
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>

            <UserMenu @ref="_userMenu" OnUserChanged="UpdateData"/>
        }
        else
        {
            <div class="flex-column">
                <table class="table">
                    <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Users</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var userGroup in _userGroups)
                    {
                        <tr>
                            <td>@userGroup.Id</td>
                            <td>@userGroup.Name</td>
                            <td>
                                <div class="flex-column">
                                    @foreach (var userId in userGroup.Users)
                                    {
                                        <text>@_users.First(user => user.Id.Equals(userId)).Name&nbsp;</text>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
                <div class="flex-row">
                    <label>
                        <input placeholder="New user group name"
                               @bind="_newUserGroupName"
                               @bind:event="oninput"/>
                    </label>
                    <button class="btn btn-outline-dark"
                            @onclick="CreateUserGroupButton">
                        Create
                    </button>
                </div>
            </div>
        }
    </div>
}

@code {
    private UserMenu _userMenu = null!;

    private UserContract[]? _users;
    private UserGroupContract[]? _userGroups;

    private string _newUserGroupName = "";

    private bool _showUsers = true;

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        var users = await _administrationService.GetUsers();
        var userGroups = await _administrationService.GetUserGroups();

        if (users is not null)
        {
            _users = users;
        }

        if (userGroups is not null)
        {
            _userGroups = userGroups;
        }

        StateHasChanged();
    }

    private async Task CreateUserGroupButton()
    {
        if (await _administrationService.CreateUserGroup(_newUserGroupName))
        {
            await UpdateData();
        }
    }
}

