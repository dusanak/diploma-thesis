@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net
@using DiplomaThesis.Client.Extensions
@using DiplomaThesis.Shared.Commands
@using DiplomaThesis.Shared.Contracts
@using System.Diagnostics

@inject HttpClient _http

<div class="flex-column float-end"
     style="display: @(ShowUserMenu ? "block" : "none"); margin-left: 10px; padding-left: 10px">

    @if (User is null || Roles is null || UserGroups is null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <p><strong>Id:</strong>&nbsp;@User.Id</p>
        <p><strong>Name:</strong>&nbsp;@User.Name</p>
        <hr/>
        <strong>Roles:</strong>
        <table class="table">
            @foreach (var role in Roles)
            {
                <tr>
                    <td>
                        @role.Name
                    </td>
                    @if (!role.Name.Equals("Admin"))
                    {
                        @if (User.Roles.Any(roleInUser => roleInUser.Name.Equals(role.Name)))
                        {
                            <button class="btn btn-outline-dark oi oi-minus"
                                    @onclick="() => RemoveRole(User.Name, role.Name)">
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-dark oi oi-plus"
                                    @onclick="() => AddRole(User.Name, role.Name)">
                            </button>
                        }
                    }
                </tr>
            }
        </table>
        
        <hr/>
        <strong>User group:</strong>
        <label>
            <select id="user_groups" 
                    name="user_groups" 
                    @bind="SelectedUserGroupId">
                <option value="@Guid.Empty.ToString()">&lt;No group assigned&gt;</option>
                @foreach (var userGroup in UserGroups)
                {
                    <option value="@userGroup.Id.ToString()" selected=@userGroup.Id.ToString().Equals(SelectedUserGroupId)>
                        @userGroup.Name
                    </option>
                }
            </select>
        </label>

            <hr/>
        <button
            class="btn btn-outline-danger flex-fill"
            style="width: 100%"
            @onclick="DeleteUser">
            Delete user
        </button>
    }
    <hr/>
    <button
        class="btn btn-outline-dark flex-fill"
        style="width: 100%"
        @onclick="ToggleUserMenu">
        Hide
    </button>
</div>

@code {

    [Parameter]
    public EventCallback OnUserChanged { get; set; }

    private UserContract? User { get; set; }

    private RoleContract[]? Roles { get; set; }
    private UserGroupContract[]? UserGroups { get; set; }

    private string _selectedUserGroupId = Guid.Empty.ToString();
    private string SelectedUserGroupId
    {
        get => _selectedUserGroupId;
        set
        {
            _selectedUserGroupId = value;
            SelectedUserGroupChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var roles = await GetRolesFromBackend();
        Roles = roles;

        var userGroups = await GetUserGroupsFromBackend();
        UserGroups = userGroups;
    }

    public bool ShowUserMenu { get; set; }

    public void ToggleUserMenu()
    {
        ShowUserMenu = !ShowUserMenu;
    }

    public void ShowUser(UserContract user)
    {
        User = user;
        ShowUserMenu = true;
        SelectedUserGroupId = User.UserGroupId.ToString();
        StateHasChanged();
    }
    
    private async Task SelectedUserGroupChanged()
    {
        Console.WriteLine("Current user guid is " + User!.UserGroupId);
        Console.WriteLine("Selected guid is " + SelectedUserGroupId);
        if (User is not null && !User.UserGroupId.Equals(Guid.Parse(SelectedUserGroupId)))
        {
            await MoveUserToUserGroup();
        }
    }

    private async Task<RoleContract[]?> GetRolesFromBackend()
    {
        try
        {
            var response = await _http.GetFromJsonAsync<IEnumerable<RoleContract>>($"Administration/ListRoles");
            return response?.ToArray();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
            return null;
        }
    }

    private async Task AddRole(string userName, string roleName)
    {
        try
        {
            var response = await _http.PutAsJsonAsync(
                $"Administration/AddRole",
                new AddRoleCommand { UserName = userName, RoleName = roleName }
                );
            if (response.IsSuccessStatusCode)
            {
                await OnUserChanged.InvokeAsync();
                await GetUser();
                StateHasChanged();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RemoveRole(string userName, string roleName)
    {
        try
        {
            await _http.PutAsJsonAsync(
                $"Administration/RemoveRole",
                new RemoveRoleCommand { UserName = userName, RoleName = roleName }
                );
            await OnUserChanged.InvokeAsync();
            await GetUser();
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task GetUser()
    {
        try
        {
            var response = await _http.GetFromJsonAsync<UserContract>($"Administration/GetUser/{User!.Id}");
            User = response;
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task DeleteUser()
    {
        try
        {
            var response = await _http.DeleteAsJsonAsync(
                $"Administration/DeleteUser",
                new RemoveRoleCommand { UserName = User!.Name }
                );
            if (response.IsSuccessStatusCode)
            {
                ToggleUserMenu();
                await OnUserChanged.InvokeAsync();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task<UserGroupContract[]?> GetUserGroupsFromBackend()
    {
        try
        {
            var response = await _http.GetFromJsonAsync<IEnumerable<UserGroupContract>>($"Administration/ListUserGroups");
            return response?.ToArray();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
            return null;
        }
    }
    
    private async Task MoveUserToUserGroup()
    {
        try
        {
            var response = await _http.PutAsJsonAsync(
                $"Administration/MoveUserToUserGroup",
                new MoveUserToUserGroupCommand { UserId = User!.Id, UserGroupId = Guid.Parse(SelectedUserGroupId) }
                );
            if (response.IsSuccessStatusCode)
            {
                await OnUserChanged.InvokeAsync();
                await GetUser();
                StateHasChanged();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}