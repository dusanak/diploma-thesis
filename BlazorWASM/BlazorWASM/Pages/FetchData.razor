@page "/fetchdata"
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<p>
    <input type="number" @bind="number"/>
    <button @onclick="UpdateForecasts">Refresh</button>    
</p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private int number = 3;

    protected override async Task OnInitializedAsync()
    {
        await UpdateForecasts();
    }

    protected async Task UpdateForecasts()
    {
        forecasts = await GetForecastsFromBackend(number) ?? await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    protected async Task<WeatherForecast[]?> GetForecastsFromBackend(int number)
    {
        var response = await Http.GetFromJsonAsync<IEnumerable<WeatherForecast>>($"https://localhost:7290/WeatherForecast/GetForecasts/{number}");

        return response?.ToArray();
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}